version: '3.8'

networks:
    readonly:
    writeonly:

services:
    portal-database:
        restart: unless-stopped
        build:
            context: ./apps/portal-database
            target: production
            dockerfile: Dockerfile
        depends_on:
            - redis
            - mongo
        environment:
            - NODE_ENV=${NODE_ENV}
        expose:
            - ${PORTAL_DATABASE_PORT}
        volumes:
            - ./apps/portal-database:/app
        command: npm start:dev
        networks:
            - readonly
            - writeonly

    portal-read:
        restart: unless-stopped
        build:
            context: ./apps/portal-read
            target: production
            dockerfile: Dockerfile
        depends_on:
            - redis
            - portal-database
        environment:
            - NODE_ENV=${NODE_ENV}
        expose:
            - ${PORTAL_READ_PORT}
        volumes:
            - ./apps/portal-read:/app
        command: npm start:dev
        networks:
            - readonly

    portal-write:
        restart: unless-stopped
        build:
            context: ./apps/portal-write
            target: production
            dockerfile: Dockerfile
        depends_on:
            - rabbitmq
            - portal-database
        environment:
            - NODE_ENV=${NODE_ENV}
        expose:
            - ${PORTAL_WRITE_PORT}
        volumes:
            - ./apps/portal-write:/app
        command: npm start:dev
        networks:
            - writeonly

    mongo:
        image: mongo
        restart: always
        environment:
            - MONGO_INIT_DATABASE=${MONGO_DATABASE}
            - MONGO_INIT_ROOT_USERNAME=${MONGO_USERNAME}
            - MONGO_INIT_ROOT_PASSWORD=${MONGO_PASSWORD}
            - MONGO_LOG_DIR=/data/logs
            - MONGO_DATA_DIR=/data/db
        ports:
            - ${MONGO_PORT}:${MONGO_PORT}
        volumes:
            - ./storage/mongo/data:/data/db
            - ./storage/mongo/log:/data/logs
            - ./infra/mongo/:/docker-entrypoint-initdb.d/
        networks:
            - readonly
            - writeonly
        command: mongod

    redis:
        image: redis:alpine
        environment:
            - REDIS_REPLICATION_MODE=master
            - REDIS_USER=${REDIS_USERNAME}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_LOG_DIR=/var/lib/redis
            - REDIS_DATA_DIR=/var/lib/redis
        ports:
            - ${REDIS_PORT}:${REDIS_PORT}
        volumes:
            - ./storage/redis/data:/var/lib/redis
            - ./storage/redis/log:/var/log/redis
        command: redis-server --requirepass ${REDIS_PASSWORD}
        networks:
            - readonly
            - writeonly

    redis-commander:
        container_name: redis-commander
        hostname: redis-commander
        image: rediscommander/redis-commander:latest
        restart: always
        depends_on:
            - redis
        environment:
            - PORT=${REDIS_COMMANDER_PORT}
            - READ_ONLY=true
            - REDIS_HOSTS=local:redis:${REDIS_PORT}
        ports:
            - ${REDIS_COMMANDER_PORT}:${REDIS_COMMANDER_PORT}
        networks:
            - readonly
            - writeonly

    rabbitmq:
        image: rabbitmq:3-management-alpine
        expose:
            - ${RABBIT_MQ_API_PORT}
            - ${RABBIT_MQ_UI_PORT}
        volumes:
            - ./storage/rabbitmq/data/:/var/lib/rabbitmq/
            - ./storage/rabbitmq/log/:/var/log/rabbitmq/
        networks:
            - writeonly
